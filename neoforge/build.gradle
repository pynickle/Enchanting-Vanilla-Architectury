plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

tasks.withType(net.fabricmc.loom.task.AbstractRunTask).configureEach {
    doFirst {
        // Step 1: Generate a filtered classpath file
        def originalClasspath = file(".gradle/loom-cache/forge_minecraft_classpath.txt")
        // We don't need this since we are using Mojmap
        def filtered = originalClasspath.readLines().findAll { !it.contains("unprotect") }

        def customClasspathFile = file("$buildDir/forge_minecraft_classpath.txt")
        customClasspathFile.text = filtered.join(System.lineSeparator())

        // Step 2: Patch launch.cfg
        def launchCfgFile = file(".gradle/loom-cache/launch.cfg")
        def lines = launchCfgFile.readLines().collect { line ->
            if (line.contains("legacyClassPath.file=")) {
                return line.replaceFirst(/(?<=legacyClassPath\.file=).*/, customClasspathFile.absolutePath.replace('\\', '/'))
            }
            return line
        }
        launchCfgFile.text = lines.join(System.lineSeparator())
        println "Patched launch.cfg to use custom classpath file"
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            clientData()
            programArgs "--all", "--mod", "enc_vanilla"
            programArgs "--output", project(':common').file('src/generated/resources').getAbsolutePath()
            programArgs "--existing", project(':common').file('src/main/resources').getAbsolutePath()
        }
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

sourceSets.main.resources { srcDir project(':common').file('src/generated/resources').getAbsolutePath() }

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    // compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    implementation("dev.isxander:yet-another-config-lib:${yacl_version}+${minecraft_version}-neoforge"){
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }

    // compileOnly("curse.maven:selene-499980:${selene_id}")
    // compileOnly("curse.maven:fast-paintings-883287:${fast_paintings_id}")
    // compileOnly("curse.maven:carryon-274259:${carryon_id}")

    // modImplementation("curse.maven:selene-499980:${selene_id}")
    // modImplementation("curse.maven:fast-paintings-883287:${fast_paintings_id}")
    // modImplementation("curse.maven:carryon-274259:${carryon_id}")

    // modImplementation("it.crystalnest:cobweb-neoforge:${minecraft_version}-${cobweb_version}")
    // modImplementation("it.crystalnest:soul-fire-d-neoforge:${minecraft_version}-${soul_fire_d_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
